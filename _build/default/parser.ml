type token =
  | EOF
  | UNIT
  | NUMBER of (int)
  | ID of (string)
  | NOT
  | ARROW
  | MULT
  | DIV
  | PLUS
  | MINUS
  | AND
  | OR
  | EQUALS
  | NOT_EQUALS
  | GREATER_EQUALS
  | LESS_EQUALS
  | GREATER
  | LESS
  | SET_EQUAL
  | O_PAREN
  | C_PAREN
  | O_CBRAC
  | C_CBRAC
  | O_BRAC
  | C_BRAC
  | COMMA
  | SEMICOLON
  | COLON
  | BOOL
  | INT
  | INTARR
  | LET
  | WHILE
  | FN
  | TRUE
  | FALSE
  | IF
  | THEN
  | ELSE

open Parsing;;
let _ = parse_error;;
# 2 "parser.mly"
(* Make available names in the Ast module *)
open Ast

(* Report a syntax error with the location of its orgin *)
let syntax_error () =
  let start_pos = Parsing.rhs_start_pos 1 in
  let end_pos = Parsing.rhs_end_pos 1 in
  raise (Error.SyntaxError {
    sl = start_pos.pos_lnum;
    sc = start_pos.pos_cnum - start_pos.pos_bol;
    el = end_pos.pos_lnum;
    ec = end_pos.pos_cnum - end_pos.pos_bol;
  })
# 59 "parser.ml"
let yytransl_const = [|
    0 (* EOF *);
  257 (* UNIT *);
  260 (* NOT *);
  261 (* ARROW *);
  262 (* MULT *);
  263 (* DIV *);
  264 (* PLUS *);
  265 (* MINUS *);
  266 (* AND *);
  267 (* OR *);
  268 (* EQUALS *);
  269 (* NOT_EQUALS *);
  270 (* GREATER_EQUALS *);
  271 (* LESS_EQUALS *);
  272 (* GREATER *);
  273 (* LESS *);
  274 (* SET_EQUAL *);
  275 (* O_PAREN *);
  276 (* C_PAREN *);
  277 (* O_CBRAC *);
  278 (* C_CBRAC *);
  279 (* O_BRAC *);
  280 (* C_BRAC *);
  281 (* COMMA *);
  282 (* SEMICOLON *);
  283 (* COLON *);
  284 (* BOOL *);
  285 (* INT *);
  286 (* INTARR *);
  287 (* LET *);
  288 (* WHILE *);
  289 (* FN *);
  290 (* TRUE *);
  291 (* FALSE *);
  292 (* IF *);
  293 (* THEN *);
  294 (* ELSE *);
    0|]

let yytransl_block = [|
  258 (* NUMBER *);
  259 (* ID *);
    0|]

let yylhs = "\255\255\
\001\000\001\000\001\000\003\000\003\000\006\000\006\000\007\000\
\007\000\004\000\004\000\004\000\008\000\008\000\008\000\005\000\
\005\000\005\000\005\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\009\000\
\009\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
\009\000\009\000\009\000\000\000\000\000"

let yylen = "\002\000\
\001\000\002\000\002\000\000\000\009\000\003\000\004\000\002\000\
\003\000\000\000\003\000\005\000\000\000\001\000\003\000\001\000\
\001\000\001\000\001\000\002\000\003\000\006\000\006\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\001\000\003\000\004\000\006\000\
\004\000\002\000\002\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\002\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\000\000\001\000\000\000\060\000\000\000\
\046\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\044\000\045\000\000\000\000\000\037\000\003\000\000\000\002\000\
\000\000\000\000\000\000\000\000\043\000\020\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\021\000\006\000\000\000\000\000\
\000\000\000\000\000\000\026\000\025\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\039\000\000\000\000\000\007\000\018\000\017\000\
\016\000\019\000\000\000\000\000\000\000\000\000\000\000\015\000\
\000\000\008\000\000\000\000\000\000\000\000\000\000\000\000\000\
\009\000\000\000\022\000\000\000\000\000\012\000\000\000\005\000"

let yydgoto = "\003\000\
\007\000\050\000\008\000\073\000\083\000\021\000\078\000\051\000\
\000\000"

let yysindex = "\006\000\
\031\000\125\255\000\000\003\000\000\000\006\255\000\000\012\000\
\000\000\243\254\125\255\125\255\049\255\125\255\014\255\125\255\
\000\000\000\000\125\255\157\002\000\000\000\000\007\255\000\000\
\125\255\125\255\125\255\170\255\000\000\000\000\142\002\216\255\
\001\255\104\255\156\255\125\255\125\255\125\255\125\255\125\255\
\125\255\125\255\125\255\125\255\125\255\125\255\125\255\027\255\
\157\002\122\002\012\255\064\002\000\000\000\000\125\255\032\255\
\125\255\157\002\029\255\000\000\000\000\013\255\013\255\170\255\
\170\255\016\255\016\255\016\255\016\255\016\255\016\255\008\255\
\034\255\125\255\000\000\037\255\028\002\000\000\000\000\000\000\
\000\000\000\000\038\255\000\000\025\255\032\255\059\255\000\000\
\125\255\000\000\125\255\125\255\029\255\040\255\032\255\157\002\
\000\000\157\002\000\000\027\255\125\255\000\000\188\255\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\073\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\066\000\000\000\000\000\000\000\000\000\
\000\000\047\255\000\000\181\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\051\255\
\247\001\052\255\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\027\002\000\000\000\000\000\000\109\000\145\000\217\000\
\253\000\042\001\078\001\114\001\150\001\186\001\222\001\000\000\
\000\000\047\255\000\000\001\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\037\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\054\255\000\000\065\002\
\000\000\090\002\000\000\051\255\000\000\000\000\075\000\000\000"

let yygindex = "\000\000\
\000\000\002\000\229\255\233\255\172\255\197\255\243\255\005\000\
\000\000"

let yytablesize = 942
let yytable = "\085\000\
\041\000\094\000\022\000\020\000\025\000\026\000\001\000\002\000\
\023\000\027\000\101\000\024\000\028\000\029\000\031\000\032\000\
\033\000\034\000\036\000\037\000\035\000\036\000\037\000\038\000\
\039\000\048\000\049\000\056\000\052\000\072\000\005\000\075\000\
\079\000\099\000\086\000\058\000\043\000\060\000\061\000\062\000\
\063\000\064\000\065\000\066\000\067\000\068\000\069\000\070\000\
\071\000\014\000\009\000\010\000\011\000\087\000\089\000\092\000\
\077\000\012\000\084\000\080\000\081\000\082\000\093\000\095\000\
\100\000\061\000\013\000\013\000\030\000\014\000\010\000\014\000\
\047\000\011\000\004\000\104\000\102\000\097\000\088\000\015\000\
\016\000\000\000\017\000\018\000\019\000\000\000\000\000\000\000\
\000\000\000\000\096\000\000\000\077\000\098\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\103\000\000\000\
\000\000\009\000\010\000\011\000\027\000\036\000\037\000\038\000\
\057\000\040\000\041\000\042\000\043\000\044\000\045\000\046\000\
\047\000\000\000\013\000\000\000\014\000\000\000\009\000\010\000\
\011\000\000\000\000\000\000\000\000\000\012\000\015\000\016\000\
\000\000\017\000\018\000\019\000\000\000\000\000\000\000\013\000\
\028\000\014\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\015\000\016\000\000\000\017\000\018\000\
\019\000\036\000\037\000\038\000\039\000\040\000\041\000\042\000\
\043\000\044\000\045\000\046\000\047\000\000\000\000\000\036\000\
\037\000\038\000\039\000\000\000\042\000\042\000\043\000\044\000\
\045\000\046\000\047\000\000\000\000\000\000\000\000\000\000\000\
\059\000\036\000\037\000\038\000\039\000\040\000\041\000\042\000\
\043\000\044\000\045\000\046\000\047\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\029\000\000\000\000\000\000\000\006\000\036\000\037\000\038\000\
\039\000\040\000\041\000\042\000\043\000\044\000\045\000\046\000\
\047\000\000\000\000\000\000\000\000\000\054\000\000\000\000\000\
\000\000\055\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\030\000\000\000\000\000\000\000\
\000\000\000\000\041\000\041\000\041\000\000\000\041\000\041\000\
\041\000\041\000\041\000\041\000\041\000\041\000\041\000\041\000\
\041\000\041\000\000\000\041\000\041\000\041\000\041\000\000\000\
\041\000\041\000\041\000\000\000\000\000\000\000\004\000\041\000\
\041\000\041\000\041\000\041\000\041\000\041\000\028\000\028\000\
\028\000\031\000\043\000\043\000\028\000\028\000\028\000\028\000\
\028\000\028\000\028\000\028\000\028\000\028\000\000\000\028\000\
\043\000\028\000\043\000\000\000\043\000\043\000\043\000\006\000\
\000\000\000\000\000\000\028\000\028\000\043\000\028\000\028\000\
\028\000\043\000\047\000\047\000\047\000\032\000\047\000\047\000\
\047\000\047\000\047\000\047\000\047\000\047\000\047\000\047\000\
\047\000\047\000\000\000\000\000\047\000\047\000\047\000\000\000\
\047\000\047\000\047\000\000\000\000\000\000\000\000\000\047\000\
\047\000\047\000\047\000\047\000\047\000\047\000\027\000\027\000\
\027\000\033\000\000\000\000\000\027\000\027\000\027\000\027\000\
\027\000\027\000\027\000\027\000\027\000\027\000\000\000\027\000\
\027\000\027\000\027\000\000\000\027\000\027\000\027\000\000\000\
\000\000\000\000\000\000\027\000\027\000\027\000\027\000\027\000\
\027\000\027\000\028\000\028\000\028\000\035\000\000\000\000\000\
\028\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
\028\000\028\000\000\000\028\000\028\000\028\000\028\000\000\000\
\028\000\028\000\028\000\000\000\000\000\000\000\000\000\028\000\
\028\000\028\000\028\000\028\000\028\000\028\000\042\000\042\000\
\042\000\036\000\000\000\000\000\000\000\000\000\042\000\042\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\042\000\
\042\000\042\000\042\000\000\000\042\000\042\000\042\000\000\000\
\000\000\000\000\000\000\042\000\042\000\042\000\042\000\042\000\
\042\000\042\000\029\000\029\000\029\000\034\000\000\000\000\000\
\000\000\000\000\029\000\029\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\029\000\029\000\029\000\029\000\000\000\
\029\000\029\000\029\000\000\000\000\000\000\000\024\000\029\000\
\029\000\029\000\029\000\029\000\029\000\029\000\030\000\030\000\
\030\000\000\000\000\000\000\000\000\000\000\000\030\000\030\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\030\000\
\030\000\030\000\030\000\000\000\030\000\030\000\030\000\000\000\
\000\000\000\000\038\000\030\000\030\000\030\000\030\000\030\000\
\030\000\030\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\031\000\031\000\031\000\000\000\000\000\
\000\000\000\000\000\000\031\000\031\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\031\000\031\000\031\000\031\000\
\040\000\031\000\031\000\031\000\000\000\000\000\000\000\000\000\
\031\000\031\000\031\000\031\000\031\000\031\000\031\000\032\000\
\032\000\032\000\000\000\000\000\000\000\000\000\000\000\032\000\
\032\000\023\000\000\000\000\000\000\000\000\000\000\000\000\000\
\032\000\032\000\032\000\032\000\000\000\032\000\032\000\032\000\
\000\000\000\000\000\000\000\000\032\000\032\000\032\000\032\000\
\032\000\032\000\032\000\033\000\033\000\033\000\000\000\000\000\
\000\000\000\000\000\000\033\000\033\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\033\000\033\000\033\000\033\000\
\000\000\033\000\033\000\033\000\000\000\000\000\000\000\000\000\
\033\000\033\000\033\000\033\000\033\000\033\000\033\000\035\000\
\035\000\035\000\000\000\000\000\000\000\000\000\000\000\035\000\
\035\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\035\000\035\000\035\000\035\000\000\000\035\000\035\000\035\000\
\000\000\000\000\000\000\000\000\035\000\035\000\035\000\035\000\
\035\000\035\000\035\000\036\000\036\000\036\000\000\000\000\000\
\000\000\000\000\000\000\036\000\036\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\036\000\036\000\036\000\036\000\
\000\000\036\000\036\000\036\000\000\000\000\000\000\000\000\000\
\036\000\036\000\036\000\036\000\036\000\036\000\036\000\034\000\
\034\000\034\000\000\000\000\000\000\000\000\000\000\000\034\000\
\034\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\034\000\034\000\034\000\034\000\000\000\034\000\034\000\034\000\
\024\000\024\000\024\000\000\000\034\000\034\000\034\000\034\000\
\034\000\034\000\034\000\000\000\000\000\000\000\000\000\000\000\
\000\000\024\000\024\000\024\000\024\000\000\000\024\000\024\000\
\024\000\000\000\000\000\000\000\000\000\024\000\024\000\024\000\
\024\000\024\000\024\000\024\000\038\000\038\000\038\000\000\000\
\000\000\036\000\037\000\038\000\039\000\040\000\041\000\042\000\
\043\000\044\000\045\000\046\000\047\000\038\000\038\000\038\000\
\038\000\090\000\038\000\038\000\038\000\091\000\000\000\000\000\
\000\000\038\000\038\000\038\000\038\000\038\000\038\000\038\000\
\000\000\000\000\040\000\040\000\040\000\036\000\037\000\038\000\
\039\000\040\000\041\000\042\000\043\000\044\000\045\000\046\000\
\047\000\000\000\000\000\040\000\040\000\040\000\040\000\076\000\
\040\000\040\000\040\000\023\000\023\000\023\000\000\000\040\000\
\040\000\040\000\040\000\040\000\040\000\040\000\000\000\000\000\
\000\000\000\000\000\000\000\000\023\000\023\000\023\000\023\000\
\000\000\023\000\023\000\023\000\000\000\000\000\000\000\000\000\
\023\000\023\000\023\000\023\000\023\000\023\000\023\000\036\000\
\037\000\038\000\039\000\040\000\041\000\042\000\043\000\044\000\
\045\000\046\000\047\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\074\000\036\000\037\000\038\000\039\000\040\000\
\041\000\042\000\043\000\044\000\045\000\046\000\047\000\000\000\
\000\000\053\000\036\000\037\000\038\000\039\000\040\000\041\000\
\042\000\043\000\044\000\045\000\046\000\047\000"

let yycheck = "\059\000\
\000\000\086\000\000\000\002\000\018\001\019\001\001\000\002\000\
\003\001\023\001\095\000\000\000\011\000\012\000\013\000\014\000\
\003\001\016\000\006\001\007\001\019\000\006\001\007\001\008\001\
\009\001\019\001\025\000\027\001\027\000\003\001\000\000\020\001\
\001\001\093\000\027\001\034\000\000\000\036\000\037\000\038\000\
\039\000\040\000\041\000\042\000\043\000\044\000\045\000\046\000\
\047\000\021\001\002\001\003\001\004\001\020\001\018\001\018\001\
\055\000\009\001\057\000\028\001\029\001\030\001\038\001\005\001\
\025\001\000\000\020\001\019\001\020\001\021\001\020\001\020\001\
\000\000\020\001\000\000\103\000\100\000\091\000\074\000\031\001\
\032\001\255\255\034\001\035\001\036\001\255\255\255\255\255\255\
\255\255\255\255\089\000\255\255\091\000\092\000\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\101\000\255\255\
\255\255\002\001\003\001\004\001\000\000\006\001\007\001\008\001\
\009\001\010\001\011\001\012\001\013\001\014\001\015\001\016\001\
\017\001\255\255\019\001\255\255\021\001\255\255\002\001\003\001\
\004\001\255\255\255\255\255\255\255\255\009\001\031\001\032\001\
\255\255\034\001\035\001\036\001\255\255\255\255\255\255\019\001\
\000\000\021\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\031\001\032\001\255\255\034\001\035\001\
\036\001\006\001\007\001\008\001\009\001\010\001\011\001\012\001\
\013\001\014\001\015\001\016\001\017\001\255\255\255\255\006\001\
\007\001\008\001\009\001\255\255\000\000\012\001\013\001\014\001\
\015\001\016\001\017\001\255\255\255\255\255\255\255\255\255\255\
\037\001\006\001\007\001\008\001\009\001\010\001\011\001\012\001\
\013\001\014\001\015\001\016\001\017\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\000\000\255\255\255\255\255\255\033\001\006\001\007\001\008\001\
\009\001\010\001\011\001\012\001\013\001\014\001\015\001\016\001\
\017\001\255\255\255\255\255\255\255\255\022\001\255\255\255\255\
\255\255\026\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\000\000\255\255\255\255\255\255\
\255\255\255\255\002\001\003\001\004\001\255\255\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\255\255\019\001\020\001\021\001\022\001\255\255\
\024\001\025\001\026\001\255\255\255\255\255\255\000\001\031\001\
\032\001\033\001\034\001\035\001\036\001\037\001\002\001\003\001\
\004\001\000\000\006\001\007\001\008\001\009\001\010\001\011\001\
\012\001\013\001\014\001\015\001\016\001\017\001\255\255\019\001\
\020\001\021\001\022\001\255\255\024\001\025\001\026\001\033\001\
\255\255\255\255\255\255\031\001\032\001\033\001\034\001\035\001\
\036\001\037\001\002\001\003\001\004\001\000\000\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\255\255\255\255\020\001\021\001\022\001\255\255\
\024\001\025\001\026\001\255\255\255\255\255\255\255\255\031\001\
\032\001\033\001\034\001\035\001\036\001\037\001\002\001\003\001\
\004\001\000\000\255\255\255\255\008\001\009\001\010\001\011\001\
\012\001\013\001\014\001\015\001\016\001\017\001\255\255\019\001\
\020\001\021\001\022\001\255\255\024\001\025\001\026\001\255\255\
\255\255\255\255\255\255\031\001\032\001\033\001\034\001\035\001\
\036\001\037\001\002\001\003\001\004\001\000\000\255\255\255\255\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\255\255\019\001\020\001\021\001\022\001\255\255\
\024\001\025\001\026\001\255\255\255\255\255\255\255\255\031\001\
\032\001\033\001\034\001\035\001\036\001\037\001\002\001\003\001\
\004\001\000\000\255\255\255\255\255\255\255\255\010\001\011\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\019\001\
\020\001\021\001\022\001\255\255\024\001\025\001\026\001\255\255\
\255\255\255\255\255\255\031\001\032\001\033\001\034\001\035\001\
\036\001\037\001\002\001\003\001\004\001\000\000\255\255\255\255\
\255\255\255\255\010\001\011\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\019\001\020\001\021\001\022\001\255\255\
\024\001\025\001\026\001\255\255\255\255\255\255\000\000\031\001\
\032\001\033\001\034\001\035\001\036\001\037\001\002\001\003\001\
\004\001\255\255\255\255\255\255\255\255\255\255\010\001\011\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\019\001\
\020\001\021\001\022\001\255\255\024\001\025\001\026\001\255\255\
\255\255\255\255\000\000\031\001\032\001\033\001\034\001\035\001\
\036\001\037\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\002\001\003\001\004\001\255\255\255\255\
\255\255\255\255\255\255\010\001\011\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\019\001\020\001\021\001\022\001\
\000\000\024\001\025\001\026\001\255\255\255\255\255\255\255\255\
\031\001\032\001\033\001\034\001\035\001\036\001\037\001\002\001\
\003\001\004\001\255\255\255\255\255\255\255\255\255\255\010\001\
\011\001\000\000\255\255\255\255\255\255\255\255\255\255\255\255\
\019\001\020\001\021\001\022\001\255\255\024\001\025\001\026\001\
\255\255\255\255\255\255\255\255\031\001\032\001\033\001\034\001\
\035\001\036\001\037\001\002\001\003\001\004\001\255\255\255\255\
\255\255\255\255\255\255\010\001\011\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\019\001\020\001\021\001\022\001\
\255\255\024\001\025\001\026\001\255\255\255\255\255\255\255\255\
\031\001\032\001\033\001\034\001\035\001\036\001\037\001\002\001\
\003\001\004\001\255\255\255\255\255\255\255\255\255\255\010\001\
\011\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\019\001\020\001\021\001\022\001\255\255\024\001\025\001\026\001\
\255\255\255\255\255\255\255\255\031\001\032\001\033\001\034\001\
\035\001\036\001\037\001\002\001\003\001\004\001\255\255\255\255\
\255\255\255\255\255\255\010\001\011\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\019\001\020\001\021\001\022\001\
\255\255\024\001\025\001\026\001\255\255\255\255\255\255\255\255\
\031\001\032\001\033\001\034\001\035\001\036\001\037\001\002\001\
\003\001\004\001\255\255\255\255\255\255\255\255\255\255\010\001\
\011\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\019\001\020\001\021\001\022\001\255\255\024\001\025\001\026\001\
\002\001\003\001\004\001\255\255\031\001\032\001\033\001\034\001\
\035\001\036\001\037\001\255\255\255\255\255\255\255\255\255\255\
\255\255\019\001\020\001\021\001\022\001\255\255\024\001\025\001\
\026\001\255\255\255\255\255\255\255\255\031\001\032\001\033\001\
\034\001\035\001\036\001\037\001\002\001\003\001\004\001\255\255\
\255\255\006\001\007\001\008\001\009\001\010\001\011\001\012\001\
\013\001\014\001\015\001\016\001\017\001\019\001\020\001\021\001\
\022\001\022\001\024\001\025\001\026\001\026\001\255\255\255\255\
\255\255\031\001\032\001\033\001\034\001\035\001\036\001\037\001\
\255\255\255\255\002\001\003\001\004\001\006\001\007\001\008\001\
\009\001\010\001\011\001\012\001\013\001\014\001\015\001\016\001\
\017\001\255\255\255\255\019\001\020\001\021\001\022\001\024\001\
\024\001\025\001\026\001\002\001\003\001\004\001\255\255\031\001\
\032\001\033\001\034\001\035\001\036\001\037\001\255\255\255\255\
\255\255\255\255\255\255\255\255\019\001\020\001\021\001\022\001\
\255\255\024\001\025\001\026\001\255\255\255\255\255\255\255\255\
\031\001\032\001\033\001\034\001\035\001\036\001\037\001\006\001\
\007\001\008\001\009\001\010\001\011\001\012\001\013\001\014\001\
\015\001\016\001\017\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\025\001\006\001\007\001\008\001\009\001\010\001\
\011\001\012\001\013\001\014\001\015\001\016\001\017\001\255\255\
\255\255\020\001\006\001\007\001\008\001\009\001\010\001\011\001\
\012\001\013\001\014\001\015\001\016\001\017\001"

let yynames_const = "\
  EOF\000\
  UNIT\000\
  NOT\000\
  ARROW\000\
  MULT\000\
  DIV\000\
  PLUS\000\
  MINUS\000\
  AND\000\
  OR\000\
  EQUALS\000\
  NOT_EQUALS\000\
  GREATER_EQUALS\000\
  LESS_EQUALS\000\
  GREATER\000\
  LESS\000\
  SET_EQUAL\000\
  O_PAREN\000\
  C_PAREN\000\
  O_CBRAC\000\
  C_CBRAC\000\
  O_BRAC\000\
  C_BRAC\000\
  COMMA\000\
  SEMICOLON\000\
  COLON\000\
  BOOL\000\
  INT\000\
  INTARR\000\
  LET\000\
  WHILE\000\
  FN\000\
  TRUE\000\
  FALSE\000\
  IF\000\
  THEN\000\
  ELSE\000\
  "

let yynames_block = "\
  NUMBER\000\
  ID\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    Obj.repr(
# 67 "parser.mly"
                                        ( syntax_error() )
# 470 "parser.ml"
               : Ast.prog))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'prog) in
    Obj.repr(
# 68 "parser.mly"
                                        ( _1 )
# 477 "parser.ml"
               : Ast.prog))
; (fun __caml_parser_env ->
    Obj.repr(
# 69 "parser.mly"
                                        ( syntax_error () )
# 483 "parser.ml"
               : Ast.prog))
; (fun __caml_parser_env ->
    Obj.repr(
# 71 "parser.mly"
                                                                ( [] )
# 489 "parser.ml"
               : 'prog))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 7 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : 'params) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'type_rule) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : Ast.expr) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : 'prog) in
    Obj.repr(
# 72 "parser.mly"
                                                                ( {name = _2; param = _4; body = _8; return = _7}::_9 )
# 500 "parser.ml"
               : 'prog))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Ast.expr) in
    Obj.repr(
# 76 "parser.mly"
                                                ( [_2] )
# 507 "parser.ml"
               : 'sequence))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Ast.expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'more_expr) in
    Obj.repr(
# 77 "parser.mly"
                                                ( _2::_4 )
# 515 "parser.ml"
               : 'sequence))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Ast.expr) in
    Obj.repr(
# 80 "parser.mly"
                                                ( [_1] )
# 522 "parser.ml"
               : 'more_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'more_expr) in
    Obj.repr(
# 81 "parser.mly"
                                                ( _1::_3 )
# 530 "parser.ml"
               : 'more_expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 84 "parser.mly"
                                           ( [] )
# 536 "parser.ml"
               : 'params))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'type_rule) in
    Obj.repr(
# 85 "parser.mly"
                                           ( [(_1, _3)] )
# 544 "parser.ml"
               : 'params))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'type_rule) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'params) in
    Obj.repr(
# 86 "parser.mly"
                                           ( (_1, _3)::_5 )
# 553 "parser.ml"
               : 'params))
; (fun __caml_parser_env ->
    Obj.repr(
# 90 "parser.mly"
                                 ( [] )
# 559 "parser.ml"
               : 'expr_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Ast.expr) in
    Obj.repr(
# 91 "parser.mly"
                                 ( [_1] )
# 566 "parser.ml"
               : 'expr_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr_list) in
    Obj.repr(
# 92 "parser.mly"
                                 (_1::_3)
# 574 "parser.ml"
               : 'expr_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 96 "parser.mly"
              ( TInt )
# 580 "parser.ml"
               : 'type_rule))
; (fun __caml_parser_env ->
    Obj.repr(
# 97 "parser.mly"
              ( TBool )
# 586 "parser.ml"
               : 'type_rule))
; (fun __caml_parser_env ->
    Obj.repr(
# 98 "parser.mly"
              ( TUnit )
# 592 "parser.ml"
               : 'type_rule))
; (fun __caml_parser_env ->
    Obj.repr(
# 99 "parser.mly"
              ( TArr )
# 598 "parser.ml"
               : 'type_rule))
; (fun __caml_parser_env ->
    Obj.repr(
# 103 "parser.mly"
                                                        ( Const(CUnit) )
# 604 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Ast.expr) in
    Obj.repr(
# 104 "parser.mly"
                                                        ( _2 )
# 611 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Ast.expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'sequence) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'sequence) in
    Obj.repr(
# 105 "parser.mly"
                                                        ( Ite(_2, Seq(_4), Seq(_6)))
# 620 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'type_rule) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Ast.expr) in
    Obj.repr(
# 106 "parser.mly"
                                                        ( Let(_2, _4, _6))
# 629 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.expr) in
    Obj.repr(
# 107 "parser.mly"
                                                        ( Assign(_1, _3))
# 637 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.expr) in
    Obj.repr(
# 108 "parser.mly"
                                                        ( Binary(Div, _1, _3))
# 645 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.expr) in
    Obj.repr(
# 109 "parser.mly"
                                                        ( Binary(Mul, _1, _3))
# 653 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.expr) in
    Obj.repr(
# 110 "parser.mly"
                                                        ( Binary(Add, _1, _3))
# 661 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.expr) in
    Obj.repr(
# 111 "parser.mly"
                                                        ( Binary(Sub, _1, _3))
# 669 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.expr) in
    Obj.repr(
# 112 "parser.mly"
                                                        ( Binary(And, _1, _3))
# 677 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.expr) in
    Obj.repr(
# 113 "parser.mly"
                                                        ( Binary(Or, _1, _3))
# 685 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.expr) in
    Obj.repr(
# 114 "parser.mly"
                                                        ( Binary(Eq, _1, _3))
# 693 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.expr) in
    Obj.repr(
# 115 "parser.mly"
                                                        ( Binary(Neq, _1, _3))
# 701 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.expr) in
    Obj.repr(
# 116 "parser.mly"
                                                        ( Binary(Geq, _1, _3))
# 709 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.expr) in
    Obj.repr(
# 117 "parser.mly"
                                                        ( Binary(Lt, _1, _3))
# 717 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.expr) in
    Obj.repr(
# 118 "parser.mly"
                                                        ( Binary(Leq, _1, _3))
# 725 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.expr) in
    Obj.repr(
# 119 "parser.mly"
                                                        ( Binary(Gt, _1, _3))
# 733 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'sequence) in
    Obj.repr(
# 120 "parser.mly"
                                                        ( Seq(_1))
# 740 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Ast.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.expr) in
    Obj.repr(
# 121 "parser.mly"
                                                        ( While(_2, _3))
# 748 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expr_list) in
    Obj.repr(
# 122 "parser.mly"
                                                        ( Call(_1, _3))
# 756 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : Ast.expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Ast.expr) in
    Obj.repr(
# 123 "parser.mly"
                                                        ( Write(_1, _3, _6))
# 765 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Ast.expr) in
    Obj.repr(
# 124 "parser.mly"
                                                        ( Read(_1, _3) )
# 773 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Ast.expr) in
    Obj.repr(
# 125 "parser.mly"
                                                        ( Unary(Not, _2))
# 780 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Ast.expr) in
    Obj.repr(
# 126 "parser.mly"
                                                        ( Binary(Sub, Const(CInt(0)), _2))
# 787 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 127 "parser.mly"
                          (Const(CBool(true)))
# 793 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 128 "parser.mly"
                          (Const(CBool(false)))
# 799 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 129 "parser.mly"
                          (Const(CInt(_1)))
# 806 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 130 "parser.mly"
                          (Id(_1))
# 813 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 135 "parser.mly"
                          ( Div )
# 819 "parser.ml"
               : 'binop))
; (fun __caml_parser_env ->
    Obj.repr(
# 136 "parser.mly"
                          ( Mul )
# 825 "parser.ml"
               : 'binop))
; (fun __caml_parser_env ->
    Obj.repr(
# 137 "parser.mly"
                          ( Add )
# 831 "parser.ml"
               : 'binop))
; (fun __caml_parser_env ->
    Obj.repr(
# 138 "parser.mly"
                          ( Sub )
# 837 "parser.ml"
               : 'binop))
; (fun __caml_parser_env ->
    Obj.repr(
# 139 "parser.mly"
                          ( And )
# 843 "parser.ml"
               : 'binop))
; (fun __caml_parser_env ->
    Obj.repr(
# 140 "parser.mly"
                          ( Or )
# 849 "parser.ml"
               : 'binop))
; (fun __caml_parser_env ->
    Obj.repr(
# 141 "parser.mly"
                          ( Eq )
# 855 "parser.ml"
               : 'binop))
; (fun __caml_parser_env ->
    Obj.repr(
# 142 "parser.mly"
                          ( Neq)
# 861 "parser.ml"
               : 'binop))
; (fun __caml_parser_env ->
    Obj.repr(
# 143 "parser.mly"
                          ( Geq )
# 867 "parser.ml"
               : 'binop))
; (fun __caml_parser_env ->
    Obj.repr(
# 144 "parser.mly"
                          ( Lt )
# 873 "parser.ml"
               : 'binop))
; (fun __caml_parser_env ->
    Obj.repr(
# 145 "parser.mly"
                          ( Leq )
# 879 "parser.ml"
               : 'binop))
; (fun __caml_parser_env ->
    Obj.repr(
# 146 "parser.mly"
                          ( Gt )
# 885 "parser.ml"
               : 'binop))
(* Entry main *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry expr *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let main (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.prog)
let expr (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 2 lexfun lexbuf : Ast.expr)
